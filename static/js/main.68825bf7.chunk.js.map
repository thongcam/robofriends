{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardArray.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","name","email","react_default","a","createElement","className","style","backgroundColor","src","concat","alt","CardList","CardComponent","robots","map","robot","components_Card","length","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","CardArray","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCJSC,EAZF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,GAAGC,EAAgBF,EAAhBE,KAAKC,EAAWH,EAAXG,MACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAAgCC,MAAO,CAACC,gBAAgB,uBACrEL,EAAAC,EAAAC,cAAA,OAAKI,IAAG,wBAAAC,OAA0BV,EAA1B,WAAuCW,IAAI,KACnDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCMGU,EAXE,SAAAb,GAAc,IACvBc,EADuBd,EAAZe,OACYC,IAAI,SAAAC,GAC7B,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMjB,GAAIgB,EAAMhB,GAAIC,KAAMe,EAAMf,KAAMC,MAAOc,EAAMd,UAG9D,OAAQW,EAAcK,OAClBf,EAAAC,EAAAC,cAAA,WACGQ,GAFyBV,EAAAC,EAAAC,cAAA,8BCGnBc,EARG,SAAApB,GAAoB,IAAlBqB,EAAkBrB,EAAlBqB,aAClB,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,SAASC,YAAY,wBAAwBhB,UAAY,0CAA0CiB,SAAUH,MCIhHI,EARA,SAACC,GACd,OACEtB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACmB,UAAU,SAASC,OAAO,SACpCF,EAAMG,WCqCEC,qBAlCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAPxCZ,EAAKa,MAAQ,CACX7B,OAAS,GACT0B,YAAc,IAJJV,mFAYM,IAAAc,EAAAX,KAClBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACzB,OAAOmC,uCAEhC,IAAAC,EACsBjB,KAAKU,MAA3B7B,EADAoC,EACApC,OAAO0B,EADPU,EACOV,YACRW,EAAiBrC,EAAOsC,OAAO,SAAApC,GACnC,OAAOA,EAAMf,KAAKoD,cAAcC,SAASd,EAAYa,iBAEvD,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAWnC,aAAca,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACmD,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAD,CAAU3C,OAAQqC,aA5BVO,cCAlBC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAAQC,SAASC,eAAe,SN0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.68825bf7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({id,name,email}) => {\r\n  return (\r\n    <div className=\"dib br3 pa2 ma2 grow shadow-5\" style={{backgroundColor:'rgb(133, 215, 138)'}}>\r\n      <img src={`https://robohash.org/${id}150x150`} alt=\"\"/>\r\n      <div className='tc'>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n// rgb(40, 134, 207)\r\n//rgb(7, 86, 147)\r\n//style={{backgroundImage : 'linear-gradient(rgb(128 121 255),rgb(209 207 249))'}}\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  const CardComponent = robots.map(robot => {\r\n      return <Card id={robot.id} name={robot.name} email={robot.email}/>;\r\n    }\r\n  );\r\n  return !CardComponent.length ?  <h1>No robots found</h1> :\r\n      <div>\r\n        {CardComponent}\r\n      </div>\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div className = 'pa2'>\r\n      <input type='search' placeholder='Search for a robot...' className = \"ph3 pv4 ba br2 b--washed-green w-40 bw1\" onChange={searchChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{overflowY:'scroll',height:'65vh'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardArray';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport '../style/App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots : [],\r\n      searchField : '',\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchField:event.target.value});\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({robots:users}));\r\n  }\r\n  render() {\r\n    const {robots,searchField} = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>Robo Friends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from \"./containers/App\";\n\nReactDOM.render(<App/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}